/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.edu.iff.bji.ec.compiladores.krenaklogo;

import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics;
import java.awt.Insets;
import java.awt.Point;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComponent;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import javax.swing.text.Element;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import javax.swing.text.Utilities;
import org.antlr.v4.runtime.BaseErrorListener;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.RecognitionException;
import org.antlr.v4.runtime.Recognizer;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.misc.ParseCancellationException;
import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.ParseTreeWalker;

/**
 *
 * @author luanp
 */
public class IDE extends javax.swing.JFrame {

    private boolean hasSyntaxErrors = false;

    /**
     * Creates new form IDE
     */
    public IDE() {
        initComponents();  // Seu método de inicialização existente

        // Criar a JTextArea
        textArea.setFont(new Font("Monospaced", Font.PLAIN, 14));

        // Criar o JScrollPane e adicionar a JTextArea a ele
        JScrollPane scrollPane = new JScrollPane(textArea);

        // Criar e configurar a barra de números de linha
        LineNumberingTextArea lineNumberingTextArea = new LineNumberingTextArea(textArea);
        scrollPane.setRowHeaderView(lineNumberingTextArea);

        // Configurar o layout do painel para BorderLayout
        panel.setLayout(new BorderLayout());

        // Adicionar o JScrollPane ao painel (no centro, por exemplo)
        panel.add(scrollPane, BorderLayout.CENTER);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        terminalArea = new javax.swing.JTextPane();
        jButton1 = new javax.swing.JButton();
        panel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("KRENAK_LOGO");

        terminalArea.setEditable(false);
        terminalArea.setBackground(new java.awt.Color(51, 51, 51));
        terminalArea.setForeground(new java.awt.Color(255, 255, 255));
        terminalArea.setSelectionColor(new java.awt.Color(204, 204, 204));
        jScrollPane2.setViewportView(terminalArea);

        jButton1.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        jButton1.setText("▶ RUN");
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton1.setFocusPainted(false);
        jButton1.setFocusable(false);
        jButton1.setHideActionText(true);
        jButton1.setOpaque(true);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        panel.setPreferredSize(new java.awt.Dimension(375, 500));

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 312, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addComponent(panel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(525, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        terminalArea.setText(" ");

        var code = (String) textArea.getText();
        CharStream cs = CharStreams.fromString(code + "\n");
        KrenakLogoLexer lexer = new KrenakLogoLexer(cs);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        KrenakLogoParser parser = new KrenakLogoParser(tokens);

        String logoFileName = "temp.logo";

        // Adiciona um listener de erro personalizado para mostrar informações sobre os erros
        parser.removeErrorListeners(); // Remove os listeners padrão
        parser.addErrorListener(new BaseErrorListener() {
            @Override
            public void syntaxError(Recognizer<?, ?> recognizer, Object offendingSymbol,
                    int line, int charPositionInLine, String msg,
                    RecognitionException e) {
                String errorMsg = String.format("Erro de sintaxe na linha %d, posição %d: %s",
                        line, charPositionInLine, msg);
                printTerminal(errorMsg, 'e');
                hasSyntaxErrors = true;
            }
        });

        // Processa o código de entrada
        try {
            ParseTree tree = parser.prog(); // Aqui o parser será executado

            StringBuilder logoCode = new StringBuilder();

            tokens.getTokens().forEach(token -> {
                String translatedText = tradutor(token.getType());
                if (translatedText != null) {
                    logoCode.append(translatedText);
                    if (token.getType() != 3) {
                        logoCode.append(" ");
                    }
                } else if (!token.getText().equals("<EOF>")) {
                    logoCode.append(token.getText()).append(" ");
                }
            });

            File logoFile = new File(logoFileName);
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(logoFile))) {
                writer.write(logoCode.toString());
            } catch (IOException ex) {
                Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
            }

            printTerminal("O cod foi criado com sucesso!", 'i');

            // Caminho para o intérprete Logo (substitua pelo caminho correto)
            String logoInterpreter = "C:\\Program Files (x86)\\UCBLogo\\ucblogo.exe";

            // Criação do comando para executar o arquivo Logo
            ProcessBuilder pb = new ProcessBuilder(logoInterpreter, logoFileName);

            pb.redirectErrorStream(true);

            // Inicia o processo se não houver erros
            if (!hasSyntaxErrors) {
                Process process = pb.start();

                new Thread(() -> {
                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                        String line;
                        while ((line = reader.readLine()) != null) {
                            printTerminal(line, 'w');
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }).start();
            }

        } catch (RecognitionException | ParseCancellationException ex) {
            // Captura exceções de reconhecimento (não deveria ocorrer se o parser terminar sem erros)
            printTerminal("Erro durante a análise: " + ex.getMessage(), 'e');
        } catch (IOException ex) {
            Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        FlatDarkLaf.setup();
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IDE().setVisible(true);
            }
        });
    }

    public void printTerminal(Object s) {
        // Chama o método principal com um valor padrão para classPrint
        printTerminal(s, 'n'); // Exemplo de valor padrão para classPrint
    }

    public void printTerminal(Object s, char classPrint) {

        switch (classPrint) {
            case 'w' -> {
                appendToTerminal(s, Color.YELLOW);
            }
            case 'e' -> {
                appendToTerminal(s, Color.RED);
            }
            case 'n' -> {
                appendToTerminal(s, Color.WHITE);
            }
            case 'i' -> {
                appendToTerminal(s, Color.CYAN);
            }
            default ->
                appendToTerminal(s, Color.WHITE);
        }

    }

    private void appendToTerminal(Object s, Color c) {
        String message;

        if (s instanceof String) {
            message = (String) s;
        } else {
            message = s.toString(); // Converte o objeto para String
        }
        StyledDocument doc = terminalArea.getStyledDocument();
        Style style = terminalArea.addStyle("Style", null);
        Style tstyle = terminalArea.addStyle("Style", null);
        StyleConstants.setForeground(style, c);
        StyleConstants.setForeground(tstyle, Color.WHITE);
        try {
            doc.insertString(doc.getLength(), "\n /Krenak/> ", tstyle);
            doc.insertString(doc.getLength(), message, style);
        } catch (BadLocationException e) {
            e.printStackTrace();
        }
    }

    public String tradutor(int i) {
        Map<Integer, String> tokenMap = new HashMap<>();

        // Adicionando os mapeamentos
        tokenMap.put(1, "to");
        tokenMap.put(2, "end");
        tokenMap.put(3, ":");
        tokenMap.put(4, ",");
        tokenMap.put(5, "repeat");
        tokenMap.put(6, "[");
        tokenMap.put(7, "]");
        tokenMap.put(8, "if");
        tokenMap.put(9, "<");
        tokenMap.put(10, ">");
        tokenMap.put(11, "=");
        tokenMap.put(12, "make");
        tokenMap.put(13, "print");
        tokenMap.put(14, "+");
        tokenMap.put(15, "-");
        tokenMap.put(16, "*");
        tokenMap.put(17, "/");
        tokenMap.put(18, "fd");
        tokenMap.put(19, "forward");
        tokenMap.put(20, "bk");
        tokenMap.put(21, "back");
        tokenMap.put(22, "rt");
        tokenMap.put(23, "right");
        tokenMap.put(24, "lt");
        tokenMap.put(25, "left");
        tokenMap.put(26, "cs");
        tokenMap.put(27, "clearscreen");
        tokenMap.put(28, "pu");
        tokenMap.put(29, "penup");
        tokenMap.put(30, "pd");
        tokenMap.put(31, "pendown");
        tokenMap.put(32, "ht");
        tokenMap.put(33, "hideturtle");
        tokenMap.put(34, "st");
        tokenMap.put(35, "showturtle");
        tokenMap.put(36, "home");
        tokenMap.put(37, "stop");
        tokenMap.put(38, "label");
        tokenMap.put(39, "setxy");
        tokenMap.put(40, "random");
        tokenMap.put(41, "for");

        String tokenText = tokenMap.get(i);

        return tokenText;

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panel;
    private javax.swing.JTextPane terminalArea;
    // End of variables declaration//GEN-END:variables
   JTextArea textArea = new JTextArea();
}

class LineNumberingTextArea extends JComponent implements CaretListener, DocumentListener, PropertyChangeListener {

    private static final long serialVersionUID = 1L;
    private final JTextArea textArea;
    private int lastDigits;
    private int lastHeight;
    private int lastLineCount;

    public LineNumberingTextArea(JTextArea textArea) {
        this.textArea = textArea;
        textArea.getDocument().addDocumentListener(this);
        textArea.addCaretListener(this);
        textArea.addPropertyChangeListener(this);
        lastDigits = 0;
        lastHeight = 0;
        lastLineCount = 0;
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        FontMetrics fontMetrics = textArea.getFontMetrics(textArea.getFont());
        Insets insets = textArea.getInsets();
        int availableWidth = getWidth() - insets.left - insets.right;
        int lineHeight = fontMetrics.getHeight();
        int y = insets.top + fontMetrics.getAscent();

        int startOffset = textArea.viewToModel(new Point(0, insets.top));
        int endOffset = textArea.viewToModel(new Point(0, getHeight()));

        while (startOffset <= endOffset) {
            try {
                int lineNumber = getLineNumber(startOffset);
                String lineNumberText = String.valueOf(lineNumber);
                int stringWidth = fontMetrics.stringWidth(lineNumberText);
                int x = availableWidth - stringWidth;
                g.drawString(lineNumberText, x, y);
                startOffset = Utilities.getRowEnd(textArea, startOffset) + 1;
                y += lineHeight;
            } catch (Exception e) {
                break;
            }
        }
    }

    private int getLineNumber(int offset) {
        Document doc = textArea.getDocument();
        Element root = doc.getDefaultRootElement();
        return root.getElementIndex(offset) + 1;
    }

    @Override
    public Dimension getPreferredSize() {
        int lineCount = textArea.getLineCount();
        int digits = Math.max(3, String.valueOf(lineCount).length());
        FontMetrics fontMetrics = textArea.getFontMetrics(textArea.getFont());
        int width = digits * fontMetrics.charWidth('0') + 6;
        int height = textArea.getHeight();

        if (lastDigits != digits) {
            lastDigits = digits;
            firePropertyChange("preferredWidth", 0, width);
        }

        if (lastHeight != height) {
            lastHeight = height;
            firePropertyChange("preferredHeight", 0, height);
        }

        return new Dimension(width, height);
    }

    @Override
    public void caretUpdate(CaretEvent e) {
        repaint();
    }

    @Override
    public void changedUpdate(DocumentEvent e) {
        documentChanged();
    }

    @Override
    public void insertUpdate(DocumentEvent e) {
        documentChanged();
    }

    @Override
    public void removeUpdate(DocumentEvent e) {
        documentChanged();
    }

    protected void documentChanged() {
        int lineCount = textArea.getLineCount();
        if (lineCount != lastLineCount) {
            repaint();
            lastLineCount = lineCount;
        }
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if ("font".equals(evt.getPropertyName())) {
            repaint();
        }
    }
}
