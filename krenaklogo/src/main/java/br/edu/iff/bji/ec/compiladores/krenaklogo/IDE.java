/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package br.edu.iff.bji.ec.compiladores.krenaklogo;

import Classes.KrenakLogoTranslator;
import Classes.LineNumberingText;
import Classes.SyntaxHighlighter;
import Classes.TerminalPrinter;
import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.BorderLayout;
import java.awt.Font;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JScrollPane;
import javax.swing.JTextPane;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.CharStreams;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.RecognitionException;
import org.antlr.v4.runtime.misc.ParseCancellationException;
import org.antlr.v4.runtime.tree.ParseTree;

/**
 *
 * @author luanp
 */
public class IDE extends javax.swing.JFrame {

    private boolean hasSyntaxErrors = false;
    TerminalPrinter terminal;

    /**
     * Creates new form IDE
     */
    public IDE() {
        initComponents();  // Seu método de inicialização existente

        // Criar a JTextArea
        textArea.setFont(new Font("Monospaced", Font.PLAIN, 14));

        // Criar o JScrollPane e adicionar a JTextArea a ele
        JScrollPane scrollPane = new JScrollPane(textArea);

        // Criar e configurar a barra de números de linha
        LineNumberingText lineNumberingText = new LineNumberingText(textArea);
        scrollPane.setRowHeaderView(lineNumberingText);

        // Configurar o layout do painel para BorderLayout
        panel.setLayout(new BorderLayout());

        // Adicionar o JScrollPane ao painel (no centro, por exemplo)
        panel.add(scrollPane, BorderLayout.CENTER);

        terminal = new TerminalPrinter(terminalArea);
        SyntaxHighlighter syntaxHighlighter = new SyntaxHighlighter(lineNumberingText, textArea);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        terminalArea = new javax.swing.JTextPane();
        jButton1 = new javax.swing.JButton();
        panel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("KRENAK_LOGO");

        terminalArea.setEditable(false);
        terminalArea.setBackground(new java.awt.Color(51, 51, 51));
        terminalArea.setForeground(new java.awt.Color(255, 255, 255));
        terminalArea.setSelectionColor(new java.awt.Color(204, 204, 204));
        jScrollPane2.setViewportView(terminalArea);

        jButton1.setBackground(javax.swing.UIManager.getDefaults().getColor("Actions.Green"));
        jButton1.setText("▶ RUN");
        jButton1.setBorder(null);
        jButton1.setBorderPainted(false);
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton1.setFocusPainted(false);
        jButton1.setFocusable(false);
        jButton1.setHideActionText(true);
        jButton1.setOpaque(true);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        panel.setPreferredSize(new java.awt.Dimension(375, 500));

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 312, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addComponent(panel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 593, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(525, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panel, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        terminalArea.setText(" ");

        var code = textArea.getText();
        CharStream cs = CharStreams.fromString(code + "\n");
        KrenakLogoLexer lexer = new KrenakLogoLexer(cs);
        CommonTokenStream tokens = new CommonTokenStream(lexer);
        KrenakLogoParser parser = new KrenakLogoParser(tokens);

        // Instancia o tradutor
        KrenakLogoTranslator krenakLogoTranslator = new KrenakLogoTranslator(terminal);

        // Adiciona o listener de erro através do método da classe
        krenakLogoTranslator.addErrorListener(parser);

        // Processa o código de entrada
        try {
            ParseTree tree = parser.prog(); // Aqui o parser será executado

            // Tradução dos tokens para código Logo
            String logoCode = krenakLogoTranslator.translateTokens(tokens);

            // Criação do arquivo Logo temporário
            String logoFileName = "temp.logo";
            File logoFile = krenakLogoTranslator.createLogoFile(logoCode, logoFileName);

            terminal.print("O cod foi criado com sucesso!", 'i');

            // Caminho para o intérprete Logo 
            String logoInterpreter = "C:\\Program Files (x86)\\UCBLogo\\ucblogo.exe";

            // Criação do comando para executar o arquivo Logo
            ProcessBuilder pb = new ProcessBuilder(logoInterpreter, logoFileName);
            pb.redirectErrorStream(true);

            // Inicia o processo se não houver erros
            if (!krenakLogoTranslator.hasSyntaxErrors()) {
                Process process = pb.start();

                new Thread(() -> {
                    try (BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()))) {
                        String line;
                        while ((line = reader.readLine()) != null) {
                            terminal.print(line, 'w');
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }).start();
            }

        } catch (RecognitionException | ParseCancellationException ex) {
            // Captura exceções de reconhecimento (não deveria ocorrer se o parser terminar sem erros)
            terminal.print("Erro durante a análise: " + ex.getMessage(), 'e');
        } catch (IOException ex) {
            System.out.println("Error IDE");
            Logger.getLogger(IDE.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        FlatDarkLaf.setup();
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IDE().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panel;
    private javax.swing.JTextPane terminalArea;
    // End of variables declaration//GEN-END:variables
   JTextPane textArea = new JTextPane();

}
